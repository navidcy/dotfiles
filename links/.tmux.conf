set-option -g prefix C-a
bind-key C-s last-window  # Go to last window with C-SPC C-s
bind-key C-a last-pane    # Go to last pane with C-SPC C-a

# enable reattach-to-user-namespace which fixes pasteboard access and launchctl 
if-shell 'uname | grep -qi Darwin' 'set-option -g default-command "reattach-to-user-namespace -l zsh"'

set -g default-terminal "screen-256color"
setw -g mode-keys vi

set -g history-limit 10000

# vi-like text yanking in copy mode
unbind [
bind Escape copy-mode
unbind p
bind-key -T copy-mode-vi v send-keys -X begin-selection

# Copy
if-shell 'uname | grep -qi Linux && which xclip > /dev/null' 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "DISPLAY=:0 xclip -i -sel clipboard"'
if-shell 'uname | grep -qi Darwin && which reattach-to-user-namespace > /dev/null' 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"'

# Paste
if-shell 'uname | grep -qi Linux && which xclip > /dev/null' 'bind p run "DISPLAY=:0 xclip -o | tmux load-buffer - ; tmux paste-buffer"'
if-shell 'uname | grep -qi Darwin && which reattach-to-user-namespace > /dev/null' 'bind p run "reattach-to-user-namespace pbpaste | tmux load-buffer - ; tmux paste-buffer"'

# vi-like movement and resize
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R
bind -r K resize-pane -U 5
bind -r J resize-pane -D 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys C-l) || tmux select-pane -R"

# Copy mode with <C-Space><Space>
bind Space copy-mode
bind C-Space copy-mode

# zoom pane
bind -r z resize-pane -Z

# resize window to smallest client actually viewing it
setw -g aggressive-resize on
# list all clients with <prefix> D and deselect with <enter>

bind R source-file ~/.tmux.conf \; display "Source file reloaded"

set -g base-index 1  # start window numbering at 1
set -g pane-base-index 1 # start pane numbering at 1
set -g renumber-windows on # renumber remaining windows when a window is closed

# mouse behavior (pre 2.1)
#setw -g mode-mouse on
#set -g mouse-select-pane on
#set -g mouse-resize-pane on
#set -g mouse-select-window on

# mouse behavior (2.1+)
set -g mouse on

setw -g automatic-rename on

# Allows us to use C-a a <command> to send commands to a TMUX session inside 
# another TMUX session
bind-key a send-prefix

# Color definitions; see list with following script:
# #!/bin/bash
# for i in {0..255} ; do
#     printf "\x1b[38;5;${i}mcolour${i}\n"
# done

set -g status-position top
#if-shell 'uname | grep -qi Linux > /dev/null' 'set -g status-position top'
set -g status-interval 5
set -g status-bg default
set -g status-fg cyan
#set -g status-left-length 20
#set -g status-left "#[fg=red]#(hostname|sed \"s/\\\\..*$//\") #[fg=green]s:#S #[fg=yellow]w:#I #[fg=cyan]p:#P"
set -g status-left "#[fg=#333333]s:#S #[fg=#999999]| "
set -g status-right-length 40

if-shell 'uname | grep -qi Darwin' "set -g status-right \"#[fg=#81a2be]#(/usr/local/bin/mpc | head -n 1 | sed 's/volume.*$//' | cut -c 1-22) #[fg=cyan]#(~/bin/battery-osx) #(~/bin/mailstatus.sh) #[fg=yellow]#(uptime|sed 's/.* //') #[fg=#333333]%Y-%m-%d #[fg=#666666]%R\""
if-shell 'uname | grep -qi Linux' "set -g status-right \"#[fg=cyan]#(acpi|sed 's/Battery//; s/0://; s/Discharging//; s/Full, //; s/remaining//; s/  , //; s/Charging, /+/; s/ until charged/ /; s/, / /; s/Unknown //; s/ $//;') #(~/bin/mailstatus.sh) #[fg=yellow]#(cat /proc/loadavg|awk '{print $1;}') #[fg=#333333]%Y-%m-%d #[fg=#666666]%R\""
set -g status-justify left

# Timeout for pane-numbering in milliseconds
set-option -g display-panes-time 3000

# Speed up commands
set-option -sg escape-time 0

# Highlighting the active window in status bar
setw -g window-status-current-bg default
setw -g window-status-current-fg default
setw -g window-status-bg default
setw -g window-status-fg white
setw -g window-status-activity-attr blink
setw -g window-status-activity-bg default
setw -g window-status-activity-fg default
setw -g window-status-bell-attr blink
setw -g window-status-bell-bg default
setw -g window-status-bell-fg default
setw -g window-status-format '#[fg=#999999]#I #[bg=default]#[fg=$666666]#W |'
setw -g window-status-current-format '(#[fg=white]#[bg=default]#I #W#[fg=white]) #[fg=#999999]|'

# Inactive panes
set -g pane-border-fg colour238

# Active panes
set -g pane-active-border-fg colour247

# Status messages
set -g message-style fg=white,bg=black
set -g message-command-style fg=white,bg=default

# use urlview to follow URLs
bind-key u capture-pane -J \; \
        save-buffer "/tmp/active_tmux_buffer" \; \
        delete-buffer \; \
        split-window -l 10 "urlview '/tmp/active_tmux_buffer' && rm /tmp/active_tmux_buffer"


bind-key o split-window -p 25 '$SHELL -c "offlineimap -qf INBOX"' \; select-pane -l
bind-key O split-window -p 25 '$SHELL -c "offlineimap"' \; select-pane -l

bind-key -r n next-window
bind-key -r N previous-window

# cycle between preset layouts. select specific presets with select-layout <n>
bind-key -r y next-layout
bind-key -r Y previous-layout
bind-key -r r rotate-window

# new windows in same directory
#bind c new-window -c "#{pane_current_path}"

# split panes in same directory
bind-key '"' split-window -c "#{pane_current_path}"
bind-key '%' split-window -h -c "#{pane_current_path}"

# Show weather information in new window
bind-key W new-window -n weather "curl 'wttr.in/?m'; echo -e '\nPress <enter> to quit'; read -n 1 -s"
bind-key M new-window -n mutt "mutt"
bind-key V new-window -n vim "vim"
bind-key P new-window -n vimpc "vimpc"
bind-key Enter new-window "tmux set status-right-length `echo $(tput cols)/3|bc|tr -d '\n'`; $SHELL"
#bind-key Enter new-window

#set-hook client-resized "tmux set status-right-length `echo $(tmux display -p '#{client_width}')/3|bc|tr -d '\n'`; tmux set status-left-length `echo $(tmux display -p '#{client_width}'put cols)/3|bc|tr -d '\n'`"
#set-hook client-resized "display '#{client_width}'"
#set-hook client-resized 'display "#(tmux display -p \'#{client_width}/3\'|bc|tr -d \'\n\')"'
#set-hook client-resized "display '#(tmux display -p \'#{client_width}\'|tr -d \'\n\')'"
